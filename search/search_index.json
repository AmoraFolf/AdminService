{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AdminService","text":"<p>You're most likely here because you're looking over my portfolio. This message is temporary, so you're special! Download the project file to review the code for yourself! AdminService.rbxl (Google Drive download)</p> <p>I only ask that you not use this in your projects. This version is not finished, and the finished product will be significantly different. Make sure to follow me on the Roblox DevForum to get a notification about my post when it comes!</p> <p></p> <p>The official documentation on the open source module 'AdminService,' the versatile, easy-to-work-with admin module for any and all Roblox developers to use!</p> <p>Current version of AdminService: UNDER_DEVELOPMENT:1.0.0-PRIVATE</p>"},{"location":"#what-is-adminservice","title":"What is AdminService?","text":"<p>AdminService is an open source module meant to make custom admin commands easy!</p> <p>With the module being open source, and its user-friendly work envrionment, you can easily add commands, even with very low level knowledge of Luau. Though, they may be basic and restrained by that.. but you will be able to do more with the more you learn!</p> <p>(This link does not exist yet, so it is just the YouTube home page, lmfao) Click here to view the DevForum post about AdminService. This documentation is where the main information on AdminService is.</p> <p>AdminService is protected with the GNU General Public License v3.0</p> <p>To the Basics!</p>"},{"location":"read-me-important/","title":"The \"Read Me Important\" module","text":"<p>There is nothing to read on this page!</p> <p>All this page contains is the contents of the \"Read Me Important\" module inside of AdminService in case you deleted it, want it check it out here, or whatever other reason you don't in studio.</p> <p>AmoraFolf's AdminService:</p> <p>Current version: UNDER_DEVELOPMENT:1.0.0-PRIVATE The most recent version will always be listed on the Roblox model page, Roblox DevForum post, and documentation.</p> <p>When updating, be sure to copy every custom command you've made, and the description for them into the new version before deleting the old version, otherwise they will be deleted!</p> <p>Credit:</p> <p>I only want credit I built into this module. You can add more credit if you want, but please do not change or remove the credits placed into the built-in GUI!</p> <p>Thank you so much for using AdminService!</p> <p>This is very easy to setup. All you need to do is require the AdminService module in a server sided script in ServerScriptService, and in a PlayerAdded event, run AdminService.init(player)</p> <p>The script could look like this:</p> <p>local Players = game:GetService(\"Players\") local AdminService = require(script:WaitForChild(\"AdminService\"))</p> <p>Players.PlayerAdded:Connect(AdminService.init)</p> <p>The module is completely open source, and you can change just about everything in it, as well as add your own commands!</p> <p>To add your own commands, you add them into the \"Cmds\" module inside of AdminService by creating a new function doing \"Cmds.cmdName = function(sender, arguments)\" The _aux module has functions to very easily do code that you would need to repeat a lot. It helps you follow the D.R.Y rule in programming!</p> <p>You just have to remember to follow the format of the built-in commands, using the _aux module script to detect specific things for you. And do not forget to add the new description values in the Descriptions module. Copy and paste the last table in the module, make sure there's a comma after it then paste it and change it according to the function's info (i.e. name (must be the exact same), description of it, and arguments it takes)</p> <p>Also don't forget to make the name of the command inside of the commands module all lowercase, otherwise it won't find the command to run in the main module using \"local status = _aux.plrStatus(arguments)\" is required to be used in any command you create that has a player for an argument</p> <p>Important Information and Terms:</p> <p>Important Information:</p> <p>Under absolutely zero conditions, AdminService should NEVER be ran by a LocalScript. In most cases, it will cause errors, and will lead to extreme vulnerabilities  in the service from exploiters. All code that should be handled by the client is automatically done by AdminService. AdminService should be placed somewhere in ServerScriptService. It does not matter if it is a direct child of ServerScriptService, or if it's in a folder, or in a  tree of different folders, the ancestor or direct parent must be ServerScriptService, otherwise AdminService is at risk of vulnerabilities from exploiters. Especially  with certain commands, exploiters can (and likely will) cause serious damage to your experience.</p> <p>Terms:     1. Everything built into AdminService are following Roblox's Terms of Service and Community Guidelines. Anything you add, such as UI, imrpoper text filtering, commands,         and anything else you can add, that is in violation of Roblox ToS and Community Guidelines is on you, and the creator, AmoraFolf, and any other developers and         contributers of the module have no responsibility.     2. Do NOT redistribute AdminService or any of its other modules, take and reuse code for your own public Roblox models or other public work (including the entire         internet) without sufficient credit to the creator and original model, or violate any other conditions under the GNU General Public License v3.0 on Roblox or any         other site and platform. Any work found in violation of the license will have action taken against it to be removed from Roblox or other site on the internet.</p> <p>Explaining _aux:</p> <p>The _aux module script is used to organize code in the Cmds module so it isn't thousands of lines long with repeating if statements</p> <p>_aux.plrStatus(data) is used to check all of the players in the arguments, or if it is entered as \"other\" or \"all\"</p> <p>_aux.getPlayer(name) is used to get a player from their username in the arguments</p> <p>_aux.isMe(argument) is used to check if the specific argument in a command provided is equal to \"me\", so it will run the command with the sender so they don't have to type their full username</p> <p>_aux.forAll(sender, function(player) will run code provided running _aux.forAll for ALL players. It is very important you add \"player\" into the parameters when writing the anonymous function</p> <p>_aux.forOther(sender, function(player) will run code provided by the script running _aux.forOther for all players except the person running the command. It is very important you add \"player\" into the parameters when writing the anonymous function</p> <p>_aux.hasPermission(player) is used to check if a player has a certain permission level or higher to be able to run specific commands. If a player's permission level is zero and they are an admin (which they have to be to have the permission level NumberValue), they will have access to all commands not restricted by permission checks</p> <p>_aux.getCharacters() will return a table of the characters for every player in the experience</p> <p>Previous Page Next Page</p>"},{"location":"thank-you/","title":"Thank you","text":"<p>Thanks for choosing or looking into AdminService!</p> <p>A lot of time and effort has been put into this project, so it means a lot to me, even if you just took the time to look into it.</p> <p>So far, there are no other developers or contributors to the project. Only me, the creator, AmoraFolf! I do plan to have contributions and other developers on the project. I do not want it to just be me. I am not taking any hires or random contributions. I plan to only have my friends help develop and contribute.</p> <p>From the creator herself, thank you for your time! I will help you as needed. Contact me on the DevForum if needed. Link will be below (and links to developers will be there when they get added to the project).</p> <p>Best regards, AmoraFolf</p> <p></p>"},{"location":"thank-you/#psst-here-are-some-links-where-you-can-find-me","title":"Psst, here are some links where you can find me!","text":"<p>Roblox DevForum YouTube</p> <p>Previous Page</p>"},{"location":"troubleshooting/","title":"Troubleshooting and support","text":"<p>ADD MORE INFORMATION WHEN IT IS NECESSARY</p> <p>...</p> <p>Warning</p> <p>Warning here</p> <p>If you've had errors and nothing here has helped your problem, if you have an important question that wasn't solved here or anywhere else, or if you need extra support, PM me on the DevForum! This is my profile</p> <p>Previous Page Next Page</p>"},{"location":"basics/_aux_module/","title":"The <code>_aux</code> module","text":"<p><code>D.R.Y.</code> One of the most basic and most important rules in programming. It stands for Don't Repeat Yourself, and it should always be followed! It's a method of organizing your code so it doesn't turn into what is called \"spaghetti code,\" which is a term used to describe programming that is very disorganized, poor, ugly, slow, and overall a nightmare. That at least is my connotative definition of it.</p> <p>Anyway, enough side tracking; the <code>_aux</code> module, short for \"auxiliary\", is used to help keep organized and follow <code>D.R.Y</code>. This is accomplished by using a function to check the \"player status,\" so whether or not a player variable was entered as \"all\" or \"other,\" or if it was just a player instead. As well as it utilizes other functions like <code>isMe()</code> to check if a specific argument is equal to \"me\", so the command will run for the sender and they don't have to write their full username.</p> <p>Why is there an underscore in front of the name?</p> <p>I have literally no idea. Just thought it looked cool </p>"},{"location":"basics/_aux_module/#permissions-game-pass-and-group-ranks","title":"Permissions, Game Pass, and Group Ranks","text":"<p>Unlike what you're probably familiar with in HD Admin and how the permission gets higher with the bigger number, the smaller number means higher permission in AdminService. Permissions also only restrict certain high level commands, like using <code>/ban</code> or <code>/unban</code>. Every command can be run by someone with the lowest permission, unless restricted using the <code>_aux.hasPermission()</code> function to check.</p> <p>The way permissions are setup is also a little weird compared to HD Admin using nested tables, however, that was the best way it would work with how it was all programmed before permissions were added in.</p> <p>Adding players into permissions is very simple. <code>1</code> is the highest permission, and <code>3</code> has the lowest. Every permission has a table inside called <code>Players</code>. You add the <code>UserId</code> of every player you want to give that permission.</p> <p>Here is a table with some other functions inside of the <code>_aux</code> module: </p> Function What it does <code>getPlayer(name: string)</code> Gets a player from a string. Can be all lowercase, all uppercase, or random. <code>forAll(sender: Player, function_)</code> Utilizes an anonymous function to run it for all players in game <code>forOther(sender: Player, function_)</code> Utilizes an anonymous function to run it for every player except the sender"},{"location":"basics/_aux_module/#there-are-more-than-these-three-refer-to-the-read-me-important-module-inside-of-adminservice-for-description-on-all-of-the-functions","title":"There are more than these three. Refer to the \"Read Me Important\" module inside of AdminService for description on all of the functions.","text":"<p>Previous Page Next Page</p>"},{"location":"basics/adding_commands/","title":"Adding Commands","text":"<p>Adding your own commands to AdminService is very easy.</p> <p>All you need is your idea, the level of knowledge needed to code that idea, and the resources to create it.</p> <p>All commands have a certain format. They all must be created in a specific way, and must have two specific parameters.</p> <p>Warning</p> <p>There should not be more or less parameters than the two, and they should not be changed, otherwise the entirety of AdminService has the potential to break and stop working.</p> <p>Here is how new commands should be created:</p> <p>Open up the <code>Cmds</code> module inside of AdminService. It does not matter where the command is inserted into the module, as long as it is not inside of another command. It must remain outside of other commands.</p> <p>The format is creating an anonymous function inside of the module's table, <code>Cmds</code>, with an index, then setting the index equal to a function. It should look like this: <pre><code>Cmds.cmdname = function() --// cmdname is what you want to name the command\n\nend\n</code></pre></p> <p>Warning</p> <p>The name of the command, so what you type after <code>Cmds.</code>, must be all lowercase, otherwise it will not work. There cannot be a single capital letter. <code>Cmds.cMdname</code> must be changed to <code>Cmds.cmdname</code></p> <p>After creating the command, you need to add the parameters, otherwise you can't even do anything with it! The two parameters you need to add are called <code>sender</code> and <code>arguments</code></p> <p><code>sender</code> is the player who triggered the command, and <code>arguments</code> is a table of the arguments passed by the player when using the command. An example would be <code>{PlayerName, 50 --[[This number could be setting the speed or something]]}</code> These parameters get put into the brackets after <code>function</code>. <pre><code>Cmds.cmdname = function(sender, arguments)\n\nend\n</code></pre></p> <p>You may notice that every other command has a colon ':', as well as \"Player\" and \"{any}\" after the <code>sender</code>, and <code>arguments</code> parameters. This is to set the type of the parameter to unlock properties you normally wouldn't have, because Roblox wouldn't have any idea what the parameters are supposed to be without it. It is very easy to add this yourself <pre><code>Cmds.cmdname = function(sender: Player, arguments: {any})\n\nend\n</code></pre></p> <p>Notice</p> <p>Adding the types to the parameters is not necessary for it to work, but it is very helpful when coding the command!</p> <p>Next, you need to figure out what arguments are needed for this to work, and what to do with them.</p> <p>For example, if you want to make a speed command, you'd have one argument be the player, and the other a number (the speed the player wants to set). The speed command already exists, this is just for an example.</p> <p>You'd need to get the player, and as you saw on the previous page, you can use the <code>_aux</code> module to check if the player argument from the sender is \"all\" or \"other,\" as well as  <pre><code>--// This one shows you how to do it for just one player\n\nCmds.speed = function(sender: Player, arguments: {any})\n    local player = _aux.getPlayer(arguments[1]) --// Since \"arguments\" is a table, and the first argument for this command is the player, you index the table with \"1\" to get the name of the player.\n\n    if _aux.isMe(arguments[1]) then --// As described on the previous page, this function will check if the selected argument is \"me\", and set the corresponding player to the sender.\n        player = sender\n    end\n\n    if player then\n        --// This is where code gets ran.\n    else\n        GUI:Notify(sender, \"Error\", \"Player is not in the experience\") --// Using the GUI module in AdminService, this will give the sender a notification if the player variable is nil.\n    end\nend\n</code></pre></p> <pre><code>--// This one shows you how to do it for other, all, or one player.\n\nCmds.speed = function(sender: Player, arguments: {any})\n    local status = _aux.plrStatus(arguments) --// As described on the previous page, this function will check if any of the arguments for a player are \"other\" or \"all,\" then it will run functions later correspondingly.\n\n    if status == \"other\" then\n        _aux.forOther(sender, function(player) --// As described on the previous page, this will run the anonymous function passed for all players in experience except the sender.\n            --// This is where code gets ran. (It is the exact same for all three spots)\n        end)\n    elseif status == \"all\" then\n        _aux.forAll(sender, function(player) --// As described on the previous page, this will run the anonymous function passed for all players in experience.\n            --// This is where code gets ran. (It is the exact same for all three spots)\n        end)\n    else\n        local player = _aux.getPlayer(arguments[1]) --// Since \"arguments\" is a table, and the first argument for this command is the player, you index the table with \"1\" to get the name of the player.\n\n        if _aux.isMe(arguments[1]) then --// As described on the previous page, this function will check if the selected argument is \"me\", and set the corresponding player to the sender.\n            player = sender\n        end\n\n        if player then\n            --// This is where code gets ran. (It is the exact same for all three spots)\n        else\n            GUI:Notify(sender, \"Error\", \"Player is not in the experience\") --// Using the GUI module in AdminService, this will give the sender a notification if the player variable is nil.\n        end\n    end\nend\n</code></pre> <p>Notice</p> <p>As shown, it is not required to use <code>_aux.plrStatus</code>. It is completely optional</p> <p>Once you have figured out the arguments needed, if you wanted it to work with \"other\" and \"all\" player types, and getting it in proper format (shown above), you need to write the actual code.</p> <p>Since this example command is changing the player's speed, you need to get their character, then their humanoid, so that you can change the humanoid's WalkSpeed property.</p> <p>The comments from the code blocks above will not be included here, only new ones. If you haven't read them (and especially if you want to), go read them from above.</p> <pre><code>Cmds.speed = function(sender: Player, arguments: {any})\n    local status = _aux.plrStatus(arguments)\n\n    if status == \"other\" then\n        _aux.forOther(sender, function(player)\n            local character = player.Character or player.CharacterAdded:Wait() --// Gets the player's character, and if it doesn't exist yet, it will return the character that is given from the CharacterAdded event.\n            local humanoid = character:WaitForChild(\"Humanoid\")\n\n            if character and humanoid then\n                if arguments[2] then --// Checks if the second argument (the number to set as the WalkSpeed) exists.\n                    local speed = tonumber(arguments[2]) --// Converts the argument (a string) into a number\n                    humanoid.WalkSpeed = speed\n                else\n                    GUI:Notify(sender, \"Error\", \"You must supply a number to set the speed of \"..player.Name..\"'s character\")\n                end\n            end\n        end)\n    elseif status == \"all\" then\n        _aux.forAll(sender, function(player)\n            local character = player.Character or player.CharacterAdded:Wait() --// Gets the player's character, and if it doesn't exist yet, it will return the character that is given from the CharacterAdded event.\n            local humanoid = character:WaitForChild(\"Humanoid\")\n\n            if character and humanoid then\n                if arguments[2] then --// Checks if the second argument (the number to set as the WalkSpeed) exists.\n                    local speed = tonumber(arguments[2]) --// Converts the argument (a string) into a number\n                    humanoid.WalkSpeed = speed\n                else\n                    GUI:Notify(sender, \"Error\", \"You must supply a number to set the speed of \"..player.Name..\"'s character\")\n                end\n            end\n        end)\n    else\n        local player = _aux.getPlayer(arguments[1])\n\n        if _aux.isMe(arguments[1]) then\n            player = sender\n        end\n\n        if player then\n            local character = player.Character or player.CharacterAdded:Wait() --// Gets the player's character, and if it doesn't exist yet, it will return the character that is given from the CharacterAdded event.\n            local humanoid = character:WaitForChild(\"Humanoid\")\n\n            if character and humanoid then\n                if arguments[2] then --// Checks if the second argument (the number to set as the WalkSpeed) exists.\n                    local speed = tonumber(arguments[2]) --// Converts the argument (a string) into a number\n                    humanoid.WalkSpeed = speed\n                else\n                    GUI:Notify(sender, \"Error\", \"You must supply a number to set the speed of \"..player.Name..\"'s character\")\n                end\n            end\n        else\n            GUI:Notify(sender, \"Error\", \"Player is not in the experience\")\n        end\n    end\nend\n</code></pre> <p>Although it is repetitive using the same code three times (kind of breaking the D.R.Y rule), it is preferable to having to repeat the same code every single time to check what the status of arguments for players, create a for loop specifically for other players, and a for loop for all players. It is a lot more compressed than it would be. And a lot more preferable than having a module just for command functions to run inside of the function for a command inside of the <code>Cmds</code> module. It sounds gross just typing that sentence.</p> <p>Notice</p> <p>This next step is also very important, because it will not show up in the \"cmds\" menu when using the <code>cmds</code> command!</p> <p>Anyway, after you have created your full command, there is one more thing you have to do.</p> <p>You have to open the <code>Descriptions</code> module inside of the <code>Cmds</code> module, then add a table like this inside of the module's table: <pre><code>cmdname = {\n    Description = \"The description must be a string, just like this! Make a description of what the command does.\"\n    Arguments = {\"Player\", \"Number\"} --// These are just examples. Make as many arguments that are used for the command (it is not recommended to make something that needs more than five), and make sure they are in the order the command uses them, otherwise a player will type something incorrectly and it will not work how you want.\n}, --// This comma at the end is very important. Without it, the script will error because it will not know how to separate it from the next index of the table. \n</code></pre></p> <p>And that is the process of making custom commands! Bravo, have a medal! </p> <p>Previous Page Next Page</p>"},{"location":"basics/setup/","title":"Setup","text":"<p>Notice</p> <p>Small amounts of setup is needed. Without it, AdminService will not work!</p> <p>Most, if not every admin command module or system requires no setup. With the way AdminService is designed, it unfortunately does, but it's done in only three lines of code!</p> <p>Despite needing setup via another script as already mentioned, it only takes three lines of code; however, you need to insert the module before you can do anything else.</p> <p>If you don't have the module, get it here.</p> <p>In Studio, you need the toolbox open if you don't already. Go to the <code>Home</code> tab at the very top, or the <code>View</code> tab, and click the <code>Toolbox</code> button in either tab. Next, you have to insert the module by going to \"My Models\"</p> <p></p> <p>Then you click on the model to insert it:</p> <p></p> <p>It may prompt you with a notification saying the model includes scripts. Just click \"Ok\" to insert it:</p> <p></p> <p>Next, it should appear in the <code>Workspace</code>. Drag it from there into <code>ServerScriptService</code>, or into a folder in <code>ServerScriptService</code>. You could also put it in <code>ServerStorage</code> or a folder in there instead.</p> <p> </p> <p>Then insert a new script into <code>ServerScriptService</code>:</p> <p></p> <p>Then inside of the script, add the following three lines of code: <pre><code>local Players = game:GetService(\"Players\") --// Accesses the Players service. This is \"Players\" in the Explorer.\nlocal AdminService = require(script.Parent:WaitForChild(\"AdminService\")) --// Gets the AdminService module to be used, and sets everything else needed up automatically after running.\n\nPlayers.PlayerAdded:Connect(AdminService.init) --// Runs the initializer for the player and sets everything up for them.\n</code></pre></p> <p>Warning</p> <p>AdminService should never be ran by a script, or be parented outside of (or have a common ancestor that isn't) <code>ServerScriptService</code> or <code>ServerStorage</code>. It could easily be accessed by an exploiter and abused. AdminService should also never be ran by a <code>LocalScript</code>, but it can't be in the first place if it's parented to (or has the common ancestor of) <code>ServerScriptService</code> or <code>ServerStorage</code>.</p> <p>And boom, you've setup AdminService!</p> <p>Previous Page Next Page</p>"},{"location":"basics/updating/","title":"Updating AdminService","text":"<p>Updating AdminService is very easy; however, if you have custom commands or custom additions/changes to other modules, you'll have to carry them over to the new version.</p> <p>Warning</p> <p>As mentioned above, it is VERY important to copy the custom commands you've made, as well as changes to other scripts inside of AdminService, or they will be deleted. This is because you are inserting a new version of AdminService from its factory form. It does not include your custom changes to it.</p> <p>To update, you simply do the process shown on the <code>Setup</code> page. Insert the module, make sure it is parented to (or has the common ancestor of) <code>ServerScriptService</code> or <code>ServerStorage</code>, then copy over any custom commands and changes you made to other scripts over to the new ones, and delete the old version of AdminService.</p> <p>After you've done those steps, boom! You successfully updated AdminService, and if you had any, carried over your custom commands and changes to it!</p> <p>Previous Page Next Page</p>"}]}